#!/usr/bin/env python3

import argparse
import json  # orjson does not have an option to pretty-serialize (indent=2)
import sys
import yaml
import os


## TODO:
#   - Create an endpoint that returns the full coco config
#   - Environmental variable giving "coco_backend" target
#   - If ^ is set, pull coco config from the backend. Parse from there.
#   - Re-configure all endpoints each time the command is run, or save locally and sync sometimes?


from coco import Endpoint, result, config

# result printing styles:
STYLES = ["json", "yaml"]


def str2bool(v):
    if v.lower() in ("yes", "true", "t", "y", "1"):
        return True
    elif v.lower() in ("no", "false", "f", "n", "0"):
        return False
    else:
        raise argparse.ArgumentTypeError("Boolean value expected.")


def get_endpoints(config):
    ee = {}
    for conf in config["endpoints"]:
        name = conf["name"]
        if not conf.get("callable", True):
            continue
        ee[name] = Endpoint(name, conf, None, None)
    return ee


parser = argparse.ArgumentParser(description="This is the coco client.")

# Find the endpoints before using argparse
try:
    if "-c" in sys.argv:
        conf = sys.argv[sys.argv.index("-c") + 1]
    elif "--conf" in sys.argv:
        conf = sys.argv[sys.argv.index("--conf") + 1]
    else:
        conf = None
except IndexError:
    conf = None

# Find endpoint path in config
coco_config = config.load_config(conf)
endpoints = get_endpoints(coco_config)

# Global options
parser.add_argument(
    "-c", "--conf", metavar="PATH", help="read coco.conf file specified by PATH"
)
parser.add_argument(
    "-r",
    "--report",
    metavar="TYPE",
    help="specify report type (choose from {})".format(result.TYPES),
    default="CODES_OVERVIEW",
    choices=result.TYPES,
)
parser.add_argument(
    "-s",
    "--style",
    metavar="STYLE",
    help="specify print style (choose from {})".format(STYLES),
    default="yaml",
    choices=STYLES,
)
parser.add_argument(
    "-t",
    "--client-refresh-time",
    metavar="SECONDS",
    type=int,
    help="specify refresh time for client printing queue fill level (default: 2)",
    default="2",
)
parser.add_argument(
    "--silent",
    action="store_const",
    const=True,
    default=False,
    help="turn off all outpot but the result (default: False)",
)

subparsers = parser.add_subparsers(
    title="endpoint",
    metavar="ENDPOINT",
    help="" "The endpoint to call. For endpoint-specific help, use: `ENDPOINT -h'",
)

# Build endpoint parsers
for name in sorted(endpoints.keys()):
    endpoint = endpoints[name]
    endpoint_parser = subparsers.add_parser(
        name, help=f"{endpoint.description} ({endpoint.type})."
    )
    if endpoint.values:
        for v, t in endpoint.values.items():
            # argparse can't handle dicts, lists and listsoflists like we want...
            # Parse them as JSON str and decode it in `Endpoint.client_call`.
            if t == list or t == dict:
                endpoint_parser.add_argument(v, type=str, help=t.__name__.upper())
            elif t == bool:
                endpoint_parser.add_argument(v, type=str2bool, help=t.__name__.upper())
            else:
                endpoint_parser.add_argument(v, type=t, help=t.__name__.upper())
    endpoint_parser.set_defaults(func=endpoint.client_call, endpoint=endpoint)

# Add coco internal endpoints to argparse here:

# blocklist
blocklist_parser = subparsers.add_parser(
    "blocklist", help=f"Show the node blocklist (GET)."
)
blocklist_parser.set_defaults(
    func=Endpoint.client_send_request, type="GET", endpoint="blocklist", data={}
)
update_blocklist_parser = subparsers.add_parser(
    "update-blocklist", help=f"Update the node blocklist (POST)."
)
UPDATE_BLOCKLIST_COMMANDS = ["add", "remove", "clear"]
update_blocklist_parser.add_argument(
    "command",
    metavar="COMMAND",
    choices=UPDATE_BLOCKLIST_COMMANDS,
    help=f"Choose from {UPDATE_BLOCKLIST_COMMANDS}.",
)
update_blocklist_parser.add_argument(
    "--hosts", metavar="HOSTS", type=str, help="Hosts to add or remove.", required=False
)
update_blocklist_parser.set_defaults(
    func=Endpoint.client_send_request,
    type="POST",
    endpoint="update-blocklist",
    data={},
    hosts="[]",
)

# reset-state
reset_parser = subparsers.add_parser(
    "reset-state", help=f"Clear the internal state and re-load yaml files (POST)."
)
reset_parser.set_defaults(
    func=Endpoint.client_send_request, type="POST", endpoint="reset-state", data={}
)

# saved-states
saved_states_parser = subparsers.add_parser(
    "saved-states", help=f"Get a list of all previously saved states (GET)."
)
saved_states_parser.set_defaults(
    func=Endpoint.client_send_request, type="GET", endpoint="saved-states", data={}
)

# coco config
config_parser = subparsers.add_parser(
    "get-coco-config", help=f"Return the configuration of coco (GET)."
)
config_parser.set_defaults(
    func=Endpoint.client_send_request, type="GET", endpoint="get-coco-config", data={}
)

# save-state
save_state_parser = subparsers.add_parser(
    "save-state", help=f"Save the active state for later (POST)."
)
save_state_parser.set_defaults(
    func=Endpoint.client_send_request, type="POST", endpoint="save-state", data={}
)
save_state_parser.add_argument(
    "name", metavar="NAME", help=f"Choose a name for the saved state."
)
save_state_parser.add_argument(
    "--overwrite",
    action="store_const",
    const=True,
    default=False,
    help="Overwrite saved state if it already exists (default: False).",
)

# load-state
load_state_parser = subparsers.add_parser(
    "load-state", help=f"Load a previously saved state (POST)."
)
load_state_parser.set_defaults(
    func=Endpoint.client_send_request, type="POST", endpoint="load-state", data={}
)
load_state_parser.add_argument("name", metavar="NAME", help=f"Name of the saved state.")

parsed_args = parser.parse_args()

if hasattr(parsed_args, "func"):
    if parsed_args.endpoint == "update-blocklist":
        if parsed_args.command != "clear":
            try:
                parsed_args.data["hosts"] = json.loads(parsed_args.hosts)
            except json.decoder.JSONDecodeError:
                print("Unable to parse list of hosts.")
                exit(1)
        parsed_args.data["command"] = parsed_args.command
    if parsed_args.endpoint == "load-state" or parsed_args.endpoint == "save-state":
        parsed_args.data["name"] = parsed_args.name
        del parsed_args.name
    if parsed_args.endpoint == "save-state":
        parsed_args.data["overwrite"] = parsed_args.overwrite
        del parsed_args.overwrite
    success, result = parsed_args.func(
        coco_config["host"],
        coco_config["port"],
        coco_config["metrics_port"],
        parsed_args,
    )
    if result:
        if parsed_args.style == "json":
            print(json.dumps(result, indent=2))
        elif parsed_args.style == "yaml":
            print(yaml.dump(result))
        else:
            print(
                "Unknown print style: {} (Choose from {})".format(
                    parsed_args.style, STYLES
                )
            )
            sys.exit(1)
    if not parsed_args.silent:
        print("Done.")
else:
    parser.print_help()
    print("\ncoco: error: an endpoint must be specified")
    sys.exit(1)

sys.exit(not success)
